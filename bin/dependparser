#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander'),
  fs = require('fs'),
  path = require('path'),
  colors = require('colors'),
  _ = require('underscore'),
  parser = require('../');

// options
program
  .version(parser.version)
  .option('-c, --checkVersion', 'Check the version')
  .option('-i, --input <folder>', 'where is the package.');

// examples
program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ dependparser -i <folder> [-c]');
  console.log('');
});

// parse argv
program.parse(process.argv);

if (!program.input) {
  console.log('$ dependparser -i <folder> [-c]');
} else {
  // process stdin
  var config = {
    checkVersion: program.checkVersion
  };
  parser.process(path.resolve(program.input), config, function (err, result) {
    if (err) {
      throw err;
    }
    var actualKeys = Object.keys(result.actual);
    var expectKeys = Object.keys(result.expect);
    var unnecessary = _.difference(actualKeys, expectKeys);
    var missed = _.difference(expectKeys, actualKeys);
    if ((unnecessary.length + missed.length) === 0) {
      console.log("Congratulations! The dependencies are matched.".green);
    } else {
      // TODO: 得判断checkVersion的情况
      console.warn("Dependencies aren't matched".red);
      console.log("Expect:");
      console.log(expectKeys.join(', '));
      console.log("Actual:");
      console.log(actualKeys.join(', '));
      if (unnecessary.length) {
        console.log((unnecessary.join(',') + " are unnecessary").green);
      }
      if (missed.length) {
        console.log((missed.join(',') + " are missed").green);
      }
    }
  });
}
